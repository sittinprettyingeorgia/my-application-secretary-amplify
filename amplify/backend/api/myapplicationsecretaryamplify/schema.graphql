enum SubscriptionTier {
  BASIC
  PREMIUM
  PREFERRED
}

enum SubscriptionType {
  MONTHLY
  ANNUALLY
  ONE_TIME
}

type Question @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}]) {
  id: ID!
  variations: [String!]
  answers: [String!]
}

enum ExpType {
  NONE
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum BenefitType {
  RET401K
  RET401KMATCH
  DENTAL
  MEDICAL
  VISION
  PTO
}

type Job @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]} {allow: groups, groups: ["dev"], operations: [read]}]) {
  id: ID!
  url: String!
  companyName: String
  position: String
  jobType: JobType
  salary: Int
  remote: Boolean
  qualifications: AWSJSON
  benefits: BenefitType
  expLvl: ExpType
}

enum EducationType {
  HIGH_SCHOOL
  ASSOCIATES
  BACHELORS
  MASTERS
  DOCTORATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  TEMPORARY
  INTERNSHIP
  CONTRACT
}

type JobPreferences @model {
  id: ID! @primaryKey @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: owner, operations: [read]}, {allow: groups, groups: ["dev"], operations: [read]}])
  jobTypes: JobType @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  salaryReq: Int @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  expLvl: String @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  preferredLocation: String @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  preferredAge: Int @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  qualifications: AWSJSON @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  education: EducationType @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  companyBlacklist: [String] @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}])
  jobLinksLimit: Int @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: owner, operations: [read]}, {allow: groups, groups: ["dev"], operations: [read]}])
}

type User @model {
  id: ID! @primaryKey @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: owner, operations: [read]}, {allow: groups, groups: ["dev"], operations: [read]}])
  firstName: String! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  lastName: String! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  email: String! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  jobLinks: [String] @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  jobLinkCollectionInProgress: Boolean! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  jobPostingInProgress: Boolean! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  currentAppInfo: AWSJSON @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  JobPreferences: JobPreferences @hasOne @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  questions: [String!] @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  subscriptionType: SubscriptionType! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  subscriptionTier: SubscriptionTier! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}])
  isActive: Boolean! @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: owner, operations: [read]}, {allow: groups, groups: ["dev"], operations: [read]}])
  identifier: String! @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: owner, operations: [read]}, {allow: groups, groups: ["dev"], operations: [read]}])
}
 