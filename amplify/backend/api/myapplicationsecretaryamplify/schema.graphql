enum SubscriptionTier {
  BASIC
  PREMIUM
  PREFERRED
}

enum SubscriptionType {
  MONTHLY
  ANNUALLY
  ONE_TIME
}

type Question @model @key(fields: ["answers, variations"]) @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}]) {
  id: ID!
  variations: [String!]
  answers: [String!]
}

enum ExpType {
  NONE
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum BenefitType {
  RET401K
  RET401KMATCH
  DENTAL
  MEDICAL
  VISION
  PTO
}

type Job @model @key(fields: ["salary, expLvl, jobType, position, remote"]) @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]} {allow: groups, groups: ["dev"], operations: [read]}]) {
  id: ID!
  url: String!
  companyName: String
  position: String
  jobType: JobType
  salary: Int
  remote: Boolean
  qualifications: AWSJSON
  benefits: BenefitType
  expLvl: ExpType
}

enum EducationType {
  HIGH_SCHOOL
  ASSOCIATES
  BACHELORS
  MASTERS
  DOCTORATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  TEMPORARY
  INTERNSHIP
  CONTRACT
}

type JobPreferences @key(fields: ["jobTypes, preferredLocation, expLvl, salaryReq"]) @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: owner, operations: [create, read, update]}, {allow: groups, groups: ["dev"], operations: [read]}]) {
  id: ID!
  jobTypes: JobType
  salaryReq: Int
  expLvl: String
  preferredLocation: String
  preferredAge: Int
  qualifications: AWSJSON
  education: EducationType
  companyBlacklist: [String]
  jobLinksLimit: Int @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, delete]}])
}

type User @model @key(fields: ["identifier, email"]) @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [create, read, update]}]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  jobLinks: [String]
  jobLinkCollectionInProgress: Boolean!
  jobPostingInProgress: Boolean!
  currentAppInfo: AWSJSON
  JobPreferences: JobPreferences @hasOne
  questions: [String!]
  subscriptionType: SubscriptionType!
  subscriptionTier: SubscriptionTier!
  isActive: Boolean! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, delete]}])
  identifier: String! @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete]}])
}
 