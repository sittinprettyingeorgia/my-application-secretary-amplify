type Answer @model @auth(rules: [{allow: groups, groups: ["dev"], operations: [read]}, {allow: groups, groups: ["admin"], operations: [read, create, update, delete]}, {allow: owner, operations: [read]}]) {
  id: ID!
  answer: String!
  userID: ID! @index(name: "byUser")
  questionID: ID! @index(name: "byQuestion")
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

type Qualification @model @auth(rules: [{allow: groups, groups: ["dev"], operations: [read]}, {allow: groups, groups: ["admin"], operations: [read, create, update, delete]}, {allow: owner, operations: [read]}]) {
  id: ID!
  variations: [String!]!
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  PREFERRED
}

enum SubscriptionType {
  MONTHLY
  ANNUALLY
  ONE_TIME
}

type Question @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete, create]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [read]}]) {
  id: ID!
  variations: [String!]
  answers: [Answer] @hasMany(indexName: "byQuestion", fields: ["id"])
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

enum ExpType {
  NONE
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum BenefitType {
  RET401K
  RET401KMATCH
  DENTAL
  MEDICAL
  VISION
  PTO
}

type Job @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [update, read, delete, create]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [read]}]) {
  id: ID!
  url: String!
  companyName: String
  position: String! @index(name: "byPositionAndSalary", sortKeyFields: ["salary"], queryField: "jobByPositionAndSalary")
  jobType: JobType!
  salary: Int!
  remote: Boolean!
  qualifications: [String!]!
  benefits: BenefitType
  expLvl: ExpType
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

enum EducationType {
  HIGH_SCHOOL
  ASSOCIATES
  BACHELORS
  MASTERS
  DOCTORATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  TEMPORARY
  INTERNSHIP
  CONTRACT
}

type JobPreferences @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [read, create, update, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [read]}]) {
  id: ID!
  jobTypes: JobType
  salaryReq: Int
  expLvl: String
  preferredLocation: String
  preferredAge: Int
  qualifications: AWSJSON!
  education: EducationType
  companyBlacklist: [String]
  jobLinksLimit: Int!
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

type User @model @auth(rules: [{allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["dev"], operations: [read]}, {allow: owner, operations: [read]}]) {
  id: ID! @index
  firstName: String!
  lastName: String!
  email: String!
  jobLinks: [String]
  jobLinkCollectionInProgress: Boolean!
  jobPostingInProgress: Boolean!
  currentAppInfo: AWSJSON
  subscriptionType: SubscriptionType!
  subscriptionTier: SubscriptionTier!
  isActive: Boolean!
  identifier: String! @primaryKey
  JobPreferences: JobPreferences @hasOne
  Answers: [Answer] @hasMany(indexName: "byUser", fields: ["id"])
  owner: String @auth(rules: [{ allow: groups, groups: ["admin"], operations: [create, update, read, delete]}, { allow: owner, operations: [read] }])
}
 